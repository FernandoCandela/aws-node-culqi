org: fcandelam
app: aws-node-culqi
service: aws-node-culqi
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
          Resource: "*"

custom:
  esbuild:
    bundle: true
    minify: false
  postgresHost:
    dev: ${env:POSTGRES_HOST}
    prod: !GetAtt MyRDSInstance.Endpoint.Address


functions:
  testDbConnection:
    handler: src/controllers/testDbConnectionController.handler
    vpc:
      securityGroupIds:
        - !GetAtt MyLambdaSecurityGroup.GroupId
      subnetIds:
        - !Ref MySubnetA
        - !Ref MySubnetB
    environment:
      POSTGRES_HOST: ${self:custom.postgresHost.${self:provider.stage}}
      POSTGRES_DB_PORT: ${env:POSTGRES_DB_PORT}
      POSTGRES_USER: ${env:POSTGRES_USER}
      POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
      POSTGRES_DB_NAME: ${env:POSTGRES_DB_NAME}
    events:
      - httpApi:
          path: /testDbConnection
          method: get

resources:
  Resources:
    MyVPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

    MySubnetA:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: us-east-2a

    MySubnetB:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: us-east-2b

    MyLambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Security Group for Lambda function
        VpcId: !Ref MyVPC

    MyRDSSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Security Group for RDS instance
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: ${env:POSTGRES_DB_PORT}
            ToPort: ${env:POSTGRES_DB_PORT}
            SourceSecurityGroupId: !GetAtt MyLambdaSecurityGroup.GroupId

    MyDBSubnetGroup:
      Type: 'AWS::RDS::DBSubnetGroup'
      Properties:
        DBSubnetGroupDescription: 'Subnet group for RDS instance'
        SubnetIds:
          - !Ref MySubnetA
          - !Ref MySubnetB

    MyRDSInstance:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        AllocatedStorage: '5'
        DBInstanceClass: 'db.t3.micro'
        Engine: 'postgres'
        EngineVersion: '15'
        DeleteAutomatedBackups: true
        AutoMinorVersionUpgrade: false
        BackupRetentionPeriod: 0
        MultiAZ: false
        MaxAllocatedStorage: '20'
        MasterUsername: ${env:POSTGRES_USER}
        MasterUserPassword: ${env:POSTGRES_PASSWORD}
        DBName: ${env:POSTGRES_DB_NAME}
        Port: ${env:POSTGRES_DB_PORT}
        DBSubnetGroupName: !Ref MyDBSubnetGroup
        VPCSecurityGroups:
          - !GetAtt MyRDSSecurityGroup.GroupId

plugins:
  - serverless-offline
  - serverless-esbuild
